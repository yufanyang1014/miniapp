
/**
 * @description 时间格式化过滤器
 * @params timestamp 毫秒时间
 * @params format 格式化字符串
 * @return formated DateTime String
 */
function date(timestamp, format) {
  const currentDate = getDate(timestamp);

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth() + 1;
  const date = currentDate.getDate();
  const hours = currentDate.getHours();
  const minutes = currentDate.getMinutes();
  const seconds = currentDate.getSeconds();

  const fullYear = year.toString();
  const fullMonth = (month < 10 ? '0' : '') + month;
  const fullDate = (date < 10 ? '0' : '') + date;
  const fullHours = (hours < 10 ? '0' : '') + hours;
  const fullMinutes = (minutes < 10 ? '0' : '') + minutes;
  const fullSeconds = (seconds < 10 ? '0' : '') + seconds;

  return format.replace(getRegExp('%T', 'g'), '%H:%M:%S')
    .replace(getRegExp('%F', 'g'), '%Y-%m-%d')
    .replace(getRegExp('%D', 'g'), 'mm/dd/yy')
    .replace(getRegExp('%Y', 'g'), fullYear)
    .replace(getRegExp('%m', 'g'), fullMonth)
    .replace(getRegExp('%d', 'g'), fullDate)
    .replace(getRegExp('%H', 'g'), fullHours)
    .replace(getRegExp('%M', 'g'), fullMinutes)
    .replace(getRegExp('%S', 'g'), fullSeconds)
    .replace(getRegExp('yyyy', 'g'), fullYear)
    .replace(getRegExp('yy', 'g'), fullYear.slice(fullYear.length - 2))
    .replace(getRegExp('MM', 'g'), fullMonth)
    .replace(getRegExp('dd', 'g'), fullDate)
    .replace(getRegExp('hh', 'g'), fullHours)
    .replace(getRegExp('mm', 'g'), fullMinutes)
    .replace(getRegExp('ss', 'g'), fullSeconds);
}

/**
 * @description 倒计时
 * @params millSeconds 结束时间(毫秒)
 * @params currentTime 当前时间(毫秒)
 * @return HH:MM:SS
 */
function countDown(millSeconds, currentTime) {
  const time = parseInt((millSeconds - currentTime) / 1000, 10);
  let hours; let minutes; let
    seconds;

  if (time <= 0 || isNaN(time)) {
    return '00:00:00';
  }

  hours = parseInt(parseInt(time / 86400, 10) * 86400 + (time % 86400), 10);
  minutes = parseInt((hours % 3600) / 60, 10);
  seconds = parseInt(hours % 3600 % 60, 10);
  hours = parseInt(hours / 3600, 10);

  hours = (hours < 10 ? '0' : '') + hours;
  minutes = (minutes < 10 ? '0' : '') + minutes;
  seconds = (seconds < 10 ? '0' : '') + seconds;
  /* eslint-disable */
  return hours+':'+minutes+':'+seconds;
  /* eslint-enable */
}

/**
 * @descriptions 解析并识别活动地址类型是h5或小程序
 */
function parseActivityUrl(url) {
  if (getRegExp('^http').test(url)) {
    /* eslint-disable */
    return '/pages/activity/webview/webview?activityUrl='+encodeURIComponent(url);
    /* eslint-enable */
  }
  /* eslint-disable */
  return  '/' + url.replace(getRegExp('^\\/'), '');
  /* eslint-enable */
}

/**
 * @desctiption 数值过万显格式
 */
function toTenThousand(val) {
  const newVal = isNaN(val) ? 0 : val;
  if (newVal < 10000) {
    return newVal;
  }
  /* eslint-disable */
  return parseInt(val / 1000, 10) / 10 + '万';
  /* eslint-enable */
}
function filterSrc(src) {
  // return src.split('!')[0];
  return src;
}

/* eslint-disable */
module.exports = {
  date: date,
  countDown: countDown,
  toTenThousand: toTenThousand,
  parseActivityUrl: parseActivityUrl,
  filterSrc: filterSrc,
}
/* eslint-enable */
